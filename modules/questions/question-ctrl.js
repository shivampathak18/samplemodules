// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/questions relating to question
 *
 * @type {questionDao|exports}
 */
var questionDao = require('./question-dao');
var Boom = require('boom');
var _ = require('underscore');
/**
 * Creates a question
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

  var question = new questionDao(req.payload);
  question.save();

  return reply(question);

};

/**
 * Creates multiple questions
 *
 * @param req
 * @param reply
 */
exports.bulkCreate = function (req, reply) {

  questionDao.collection.insert(JSON.parse(req.payload),function(err,docs){
    console.log('I m here');
    if (err) {
        // TODO: handle error
        console.log(err);
        return reply(Boom.wrap(err));
    } else {
        return reply(docs);
    }
  });
};

/**
 * Gets all questions
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {
  var query = req.query;
  /*var conditions = query['filter'] && query['filter'] || {};
  var projection = query['projection'] && query['projection'] || {};*/

  var conditions, projection,options;
  if(!_.isEmpty(query['filter']))  
    conditions = JSON.parse(query['filter']);
  else
    conditions = {};  
 
  if(!_.isEmpty(query['projection']))  
    projection = JSON.parse(query['projection']);
  else
    projection = {};
  
  if(!_.isEmpty(query['options']))  
    options = JSON.parse(query['options']);
  else
    options = {};


  questionDao.find(conditions, projection, options, function(err, questions){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(questions);
  });

};

/**
 * Finds all questions and returns the first question object
 *
 * @param req
 * @param reply
 */
exports.findOne = function (req, reply) {
  var query = req.query;
    
  var conditions, projection,options;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['projection']))  
      projection = JSON.parse(query['projection']);
    else
      projection = {};
    
    if(!_.isEmpty(query['options']))  
      options = JSON.parse(query['options']);
    else
      options = {};    

  questionDao.findOne(conditions, projection, options, function(err, question){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }
    else
      return reply(question);
    //return reply(surveys);
  });

};

/**
 * Get a specific question by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

  var _id = req.params['id'];

  questionDao.findById(_id, function (err, question) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(question);
  });
};

/**
 * Update a specific question by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {
 console.log("payload: ",req.payload);
 //var payload = JSON.parse(req.payload);
 var payload = req.payload; 
 var _id = req.params['id']
 // var update = payload['update'];
var update = payload;
  var options = {'new': true};
  questionDao.findByIdAndUpdate(_id, update, options, function(err, question){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(question);
  })
};
    
/**
 * Remove a specific question by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

  questionDao.findByIdAndRemove(req.params.id, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(data);
  });
};

/* Add new methods above */

/**
 * Counts number of questions for given conditions or no condition
 * @param req
 * @param reply
 */
exports.count = function (req, reply) {
  var query = req.query;
  var conditions;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};

  questionDao.count(conditions, function(err, result){
    // Check for embed fields
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(result);
    //return reply(surveys);
  });
};

/**
 * Finds distinct values of field for documents matching conditions.
 *
 * @param req
 * @param reply
 */
exports.distinct = function (req, reply) {
  var query = req.query;
    
  var conditions, field;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['field']))  
      field = query['field'];
    else
      field = '';      

  questionDao.distinct(field, conditions, function(err, questions){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(questions);
    //return reply(surveys);
  });

};