// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to group
 *
 * @type {groupDao|exports}
 */
var groupDao = require('./group-dao');
var Boom = require('boom');

/**
 * Creates a group
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

	groupDao.create(req.payload, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Gets all groups
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {

	groupDao.find(function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Finds all groups and returns the first group object
 *
 * @param req
 * @param reply
 */
exports.findOne = function (req, reply) {
  var query = req.query;
    
  var conditions, projection,options;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['projection']))  
      projection = JSON.parse(query['projection']);
    else
      projection = {};
    
    if(!_.isEmpty(query['options']))  
      options = JSON.parse(query['options']);
    else
      options = {};    

  groupDao.findOne(conditions, projection, options, function(err, group){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }
    else
      return reply(group);
    //return reply(surveys);
  });

};

/**
 * Get a specific group by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

	groupDao.findById(req.params.id, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Update a specific group by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {

	groupDao.update(req.params.id, req.payload, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};
		
/**
 * Remove a specific group by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

	groupDao.remove(req.params.id, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/* Add new methods above */

/**
 * Counts number of group for given conditions or no condition
 * @param req
 * @param reply
 */
exports.count = function (req, reply) {
  var query = req.query;
  var conditions;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};

  groupDao.count(conditions, function(err, result){
    // Check for embed fields
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(result);
    //return reply(surveys);
  });
};

/**
 * Finds distinct values of field for documents matching conditions.
 *
 * @param req
 * @param reply
 */
exports.distinct = function (req, reply) {
  var query = req.query;
    
  var conditions, field;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['field']))  
      field = query['field'];
    else
      field = '';     

  groupDao.distinct(field, conditions, function(err, groups){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(groups);
    //return reply(surveys);
  });

};
