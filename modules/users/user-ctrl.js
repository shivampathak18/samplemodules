// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to answer
 *
 * @type {userDao|exports}
 */
var userDao = require('./user-dao');
var Boom = require('boom');
var Wreck = require('wreck');

/**
 * Creates a answer
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

  var sign = req.server.plugins['collect-backend']['sign']
  var user = new userDao(req.payload);
  user.save();
  var token = sign(user._id);

  user = user.toObject();
  delete user['_id'];
  user['token'] = token


  var session_object = {
    "allowance": 999,
    "rate": 1000,
    "per": 60,
    "expires": 0,
    "quota_max": -1,
    "quota_remaining": 0,
    "quota_renewal_rate": 60,
    "access_rights": {
      "4b1f2408602644317193d294e2493fce": {
        "api_name": "SC Collect",
        "api_id": "4b1f2408602644317193d294e2493fce"
      }
    },
    "org_id": ""
  }


  // wreck.post("http://api.socialcops.com/tyk/keys/" + token, {
  //     headers: {
  //       "x-tyk-authorization": "352d20ee67be67f6340b4c0605b044bc4"
  //     },
  //     payload: JSON.stringify(session_object),
  //   }, function(err, response, payload){

  //     wreck.read(response, {json: true}, function(){
  //       console.log()
  //     })
  //     console.log(payload)
  //   })


  Wreck.request('put', 'http://localhost:8080/tyk/keys/' + token,
    {
      headers: {
        "x-tyk-authorization": "352d20ee67be67f6340b4c0605b044b7",
      },
      payload: JSON.stringify(session_object) },
      function (err, res) {
        console.log(res.headers)
        Wreck.read(res, {json: true}, function (err, payload) {
          return reply(user);
        });
  });



};

/**
 * Gets all answers
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {

  userDao.find(function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    reply(data);
  });
};

/**
 * Get a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

  userDao.findById(req.params.id, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    reply(data);
  });
};

/**
 * Update a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {

  userDao.update(req.params.id, req.payload, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    reply(data);
  });
};
    
/**
 * Remove a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

  userDao.remove(req.params.id, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    reply(data);
  });
};

/* Add new methods above */
