// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/answers relating to answer
 *
 * @type {answerDao|exports}
 */
var answerDao = require('./answer-dao');
var Boom = require('boom');
var fs = require('fs');
var zlib = require('zlib');
var _ = require('underscore');

/**
 * Creates a answer
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

  var answer = new answerDao(req.payload);
  answer.save();

  return reply(answer);

};

exports.createFromFile = function(req, reply){
  var data = req.payload;
  var s3Stream = req.server.plugins['collect-backend']['s3Stream']

  if (data.file) {

    var compress = zlib.createGzip();

    var upload = s3Stream.upload({
      "Bucket": "collect-test",
      "Key": "ans"
    });

    // Handle errors. 
    upload.on('error', function (error) {
      console.log(error);
    });
     
    /* Handle progress. Example details object:
       { ETag: '"f9ef956c83756a80ad62f54ae5e7d34b"',
         PartNumber: 5,
         receivedSize: 29671068,
         uploadedSize: 29671068 }
    */
    upload.on('part', function (details) {
      console.log(details);
    });
     
    /* Handle upload completion. Example details object:
       { Location: 'https://bucketName.s3.amazonaws.com/filename.ext',
         Bucket: 'bucketName',
         Key: 'filename.ext',
         ETag: '"bf2acbedf84207d696c8da7dbb205b9f-5"' }
    */
    upload.on('uploaded', function (details) {
      console.log(details);
    });    

    var name = "ans";
    var path = "/tmp/" + name;
    var file = fs.createWriteStream(path);

    file.on('error', function (err){
      console.error(err);
    });

    data.file.pipe(compress).pipe(upload)
    data.file.pipe(file);
    data.file.on('end', function (err) { 
      console.log("here");
      var ret = {
        filename: data.file.hapi.filename,
        headers: data.file.hapi.headers
      }
      reply(JSON.stringify(ret));
    })
  }
}

/**
 * Gets all answers
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {
  var query = req.query;
  /*var conditions = query['filter'] && query['filter'] || {};
  var projection = query['projection'] && query['projection'] || {};*/

  var conditions, projection,options,embed_fields;
  if(!_.isEmpty(query['filter']))  
    conditions = JSON.parse(query['filter']);
  else
    conditions = {};  
 
  if(!_.isEmpty(query['projection']))  
    projection = JSON.parse(query['projection']);
  else
    projection = {};
  
  if(!_.isEmpty(query['options']))  
    options = JSON.parse(query['options']);
  else
    options = {};

  if(!_.isEmpty(query['embed']))  
    embed_fields = JSON.parse(query['embed']);
  else
    embed_fields = [];

  answerDao.find(conditions, projection, options, function(err, answers){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(answers);
  });

};

/**
 * Finds all answers and returns the first answer object
 *
 * @param req
 * @param reply
 */
exports.findOne = function (req, reply) {
  var query = req.query;
    
  var conditions, projection,options;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['projection']))  
      projection = JSON.parse(query['projection']);
    else
      projection = {};
    
    if(!_.isEmpty(query['options']))  
      options = JSON.parse(query['options']);
    else
      options = {};    

  answerDao.findOne(conditions, projection, options, function(err, answer){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }
    else
      return reply(answer);
    //return reply(surveys);
  });

};

/**
 * Get a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

  var _id = req.params['id'];

  answerDao.findById(_id, function (err, answer) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(answer);
  });
};

/**
 * Update a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {
  var payload = JSON.parse(req.payload);
  var _id = req.params['id']
  var update = payload['update'];
  var options = {'new': true};
  answerDao.findByIdAndUpdate(_id, update, options, function(err, answer){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(answer);
  })
};
    
/**
 * Remove a specific answer by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

  answerDao.findByIdAndRemove(req.params.id, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(data);
  });
};

/**
 * Counts number of answers for given conditions or no condition
 * @param req
 * @param reply
 */
exports.count = function (req, reply) {
  var query = req.query;
  var conditions;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};

  answerDao.count(conditions, function(err, result){
    // Check for embed fields
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(result);
    //return reply(surveys);
  });
};

/**
 * Finds distinct values of field for documents matching conditions.
 *
 * @param req
 * @param reply
 */
exports.distinct = function (req, reply) {
  var query = req.query;
    
  var conditions, field;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
    if(!_.isEmpty(query['field']))  
      field = query['field'];
    else
      field = '';      

  answerDao.distinct(field, conditions, function(err, answers){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(answers);
    //return reply(surveys);
  });

};

/* Add new methods above */

/* Test sendgrid plugin exposed in main index.js for sc-collect app

*/

exports.testSendGrid = function(req, reply){
  //console.log('i m here');
  //console.log(req.server.plugins)
  req.server.plugins['collect-backend'].sendEmail(req,reply,function(err,res){
    if(err)
      reply(Boom.wrap(err));
    else
      reply(res);
  });
};

/* Test twilio sms exposed in main index.js for sc-collect app

*/

exports.testSMS = function(req, reply){
  //console.log('i m here');
  //console.log(req.server.plugins)
  var to = ["+918506883774","+919599693819"];
  var message = "Thank You!"
  req.server.plugins['collect-backend'].sendQuickSMS(to,"(920) 268-4866",message,function(res){
    reply(res);
  });
};

exports.testSMSBulk = function(req, reply){
  //console.log('i m here');
  //console.log(req.server.plugins)
  var to = [
    {"hp":"+918506883774","name":"Shivam Idea"},
    {"hp":"+919599693819","name":"Shivam Airtel"},
    {"hp":"+919717379551","name":"Mukund"},
    {"hp":"+919561905809","name":"Avinash"},
    {"hp":"+919643630278","name":"Christine"},
    {"hp":"+919886742174","name":"Deepu"},
    {"hp":"+919910421478","name":"Krishna"},
    {"hp":"+919910966512","name":"Prukalpa"},
    {"hp":"+917759091029","name":"Richa"},
    {"hp":"+919599693821","name":"Sharky"},
    {"hp":"+919958185522","name":"Sanjib Da"},
    {"hp":"+918802369421","name":"Varun"},
    {"hp":"+919643403194","name":"Vasu"},
    {"hp":"+919896857770","name":"Yatin"},
    {"hp":"+919818608619","name":"Rishabh"},
    {"hp":"+919928997260","name":"Divyansh"}
  ];
  //var message = "Hello Hello!";
  var demoTo = to;
  //var demoTo = to.slice(0,2);
  var message = JSON.parse(req.payload).message;
  req.server.plugins['collect-backend'].sendQuickSMS(demoTo,"+12012583817",message,function(res){
    reply(res);
  });
};
