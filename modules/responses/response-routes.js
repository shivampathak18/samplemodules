// This is a file generated by the yeoman generator hapijs

/**
 * All the endpoints for anything related to response
 *
 * @type {exports}
 */
var Joi = require('joi');
var responseController = require('./response-ctrl');
var routeValidation = require('./response-route-validation');

module.exports = function() {
  return [
    {
      method: 'POST',
      path: '/responses',
      config: {
        tags: ['api'],
        description: 'Creates a response',
        handler: responseController.create,
        // validate: routeValidation.post
      }
    },
		
    {
      method: 'GET',
      path: '/responses',
      config : {
        tags: ['api'],
        description: 'Fetches all responses',
        handler: responseController.find
      }
    },
    {
      method: 'GET',
      path: '/responses/findOne',
      config : {
        tags: ['api'],
        description: 'Fetches one response',
        handler: responseController.findOne
      }
    },
    {
      method: 'GET',
      path: '/responses/count',
      config : {
        tags: ['api'],
        description: 'Returns number of responses based on any or no conditions',
        handler: responseController.count
      }
    },

    {
      method: 'GET',
      path: '/responses/distinct',
      config : {
        tags: ['api'],
        description: 'Finds distinct values of field for documents matching conditions',
        handler: responseController.distinct
      }
    },
		
    {
      method: 'GET',
      path: '/responses/{id}',
      config : {
        tags: ['api'],
        description: 'Fetches a response by id',
        handler: responseController.findById,
        // validate: routeValidation.getById
      }
    },
		
    {
      method: 'PUT',
      path: '/responses/{id}',
      config : {
        tags: ['api'],
        description: 'Updates a response for a specific id',
        handler: responseController.update,
        // validate: routeValidation.put
      }
    },
		
    {
      method: 'DELETE',
      path: '/responses/{id}',
      config : {
        tags: ['api'],
        description: 'Remove a response for a specific id',
        handler: responseController.remove,
        // validate: routeValidation.delete
      }
    },

    {
      method: 'GET',
      path: '/responses/getFlaggedResponseCountForUserPerSurvey',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getFlaggedResponseCountForUserPerSurvey,
        // validate: routeValidation.getFlaggedResponseCountForUserPerSurvey
      }
    },
		
    {
      method: 'GET',
      path: '/responses/getResponseCountByUser',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getResponseCountByUser,
        // validate: routeValidation.getResponseCountByUser
      }
    },

    {
      method: 'GET',
      path: '/responses/getResponseTypesByUserPerSurvey',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getResponseTypesByUserPerSurvey,
        // validate: routeValidation.getResponseTypesByUserPerSurvey
      }
    },

    {
      method: 'GET',
      path: '/responses/getResponseCountForUserPerDate',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getResponseCountForUserPerDate,
        // validate: routeValidation.getResponseCountForUserPerDate
      }
    },

    {
      method: 'GET',
      path: '/responses/getResponseCountForUserPerSurvey',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getResponseCountForUserPerSurvey,
        // validate: routeValidation.getResponseCountForUserPerSurvey
      }
    },

    {
      method: 'GET',
      path: '/responses/getAnswerCountForOrganization',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getAnswerCountForOrganization,
        // validate: routeValidation.getAnswerCountForOrganization
      }
    },

    {
      method: 'GET',
      path: '/responses/getResponsesPerAppVersion',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getResponsesPerAppVersion,
        // validate: routeValidation.getResponsesPerAppVersion
      }
    },

    {
      method: 'GET',
      path: '/responses/getSurveyWiseResponseCountByDate',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getSurveyWiseResponseCountByDate,
        // validate: routeValidation.getSurveyWiseResponseCountByDate
      }
    },

    {
      method: 'GET',
      path: '/responses/getForcedvsRegularResponseCount',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getForcedvsRegularResponseCount,
        // validate: routeValidation.getForcedvsRegularResponseCount
      }
    },

    {
      method: 'GET',
      path: '/responses/getAverageTimeTakenPerSurvey',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getAverageTimeTakenPerSurvey,
        // validate: routeValidation.getAverageTimeTakenPerSurvey
      }
    },

    {
      method: 'GET',
      path: '/responses/getAllResponseDetails',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getAllResponseDetails,
        // validate: routeValidation.getAllResponseDetails
      }
    },

    {
      method: 'GET',
      path: '/responses/getGeoLocPerResponse',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getGeoLocPerResponse,
        // validate: routeValidation.getGeoLocPerResponse
      }
    },

    {
      method: 'GET',
      path: '/responses/getAverageDailyResponseCount',
      config: {
        tags: ['api'],
        description: 'Returns count of responses based on criteria',
        handler: responseController.getAverageDailyResponseCount,
        // validate: routeValidation.getAverageDailyResponseCount
      }
    }


		/* Add new methods above */
  ]
}();
