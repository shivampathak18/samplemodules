// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to survey
 *
 * @type {surveyDao|exports}
 */
var surveyDao = require('./survey-dao');
var Boom = require('boom');
var mongoose = require('mongoose');
var _ = require('underscore');
var embedLib = require('../../helpers/embed-docs/embed-fields')
/**
 * Creates a survey
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

  var survey = new surveyDao(req.payload);
  survey.save(function(err,response){
    console.log(arguments);
    return reply(survey);
    
  });


};


/**
 * Create dummy survey with questions
 *
 * @param req
 * @param reply
 */
exports.createDummySurveyWithQuestions = function (req, reply) {
  var surveyPayload = JSON.parse(req.payload);
  var questions = surveyPayload.questions;
  var Question = mongoose.model('Question');
  Question.collection.insert(questions,function(err,docs){
    console.log('I m here');
    if (err) {
        // TODO: handle error
        console.log('error in question insertion');
        return reply(Boom.wrap(err));
    } else {
        questionIds = _.pluck(docs.ops,'_id');
        surveyPayload['questions'] = questionIds;
        var survey = new surveyDao(surveyPayload);
        survey.save(function(err,response){
          if(err){
            console.log('error in survey creation');
            console.log(arguments);
          }
          else          
            return reply(survey);          
        });
        //return reply(docs);
    }
  });
};

/**
 * Gets all surveys
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {
  var query = req.query;
  
  var conditions, projection,options,embed_fields;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   console.log(query['projection']);
    if(!_.isEmpty(query['projection']))  
      projection = JSON.parse(query['projection']);
    else
      projection = {};
    
    if(!_.isEmpty(query['options']))  
      options = JSON.parse(query['options']);
    else
      options = {};

    if(!_.isEmpty(query['embed']))  
      embed_fields = JSON.parse(query['embed']);
    else
      embed_fields = [];

  surveyDao.find(conditions, projection, options, function(err, surveys){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }
    if(embed_fields.length > 0){
      embedLib.main(embed_fields,surveys,'survey',function(error,result){
        console.log('i m finally here');
        if(error){
          return reply(Boom.wrap(error));
        }
        else{
          return reply(result);
        }
      });
    }
    else
      return reply(surveys);
    //return reply(surveys);
  });

};

/**
 * Finds all surveys and returns the first survey object
 *
 * @param req
 * @param reply
 */
exports.findOne = function (req, reply) {
  var query = req.query;
    
  var conditions, projection,options,embed_fields;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['projection']))  
      projection = JSON.parse(query['projection']);
    else
      projection = {};
    
    if(!_.isEmpty(query['options']))  
      options = JSON.parse(query['options']);
    else
      options = {};

    if(!_.isEmpty(query['embed']))  
      embed_fields = JSON.parse(query['embed']);
    else
      embed_fields = [];

  surveyDao.findOne(conditions, projection, options, function(err, survey){
    // Check for embed fields
    
    if (err) {
      return reply(Boom.wrap(err));
    }
    if(embed_fields.length > 0){
      var surveys = new Array(survey);
      embedLib.main(embed_fields,surveys,'survey',function(error,result){
        console.log('i m finally here');
        if(error){
          return reply(Boom.wrap(error));
        }
        else{
          if(result.length > 0)
            result = result[0];
          else
            result = {};
          return reply(result);
        }
        
      });
    }
    else
      return reply(survey);
    //return reply(surveys);
  });

};

/**
 * Get a specific survey by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

  var _id = req.params['id'], embed_fields;
  var query = req.query;
  if(!_.isEmpty(query['embed']))  
      embed_fields = JSON.parse(query['embed']);
    else
      embed_fields = [];

  console.log(_id); 

  surveyDao.findById(_id, function (err, survey) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    else{
      if(embed_fields.length > 0){
        var surveys = new Array(survey);

        embedLib.main(embed_fields,surveys,'survey',function(error,result){
          if(error){
            return reply(Boom.wrap(error));
          }
          else{
            if(result.length > 0)
              result = result[0];
            else
              result = {};
            return reply(result);
          }
        });
      }
      else
        return reply(survey);
    }    
  });
};

/**
 * Update a specific survey by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {
  var payload = JSON.parse(req.payload);
  var _id = req.params['id']
  var update = payload['update'];
  var options = {'new': true};
// 

  surveyDao.findByIdAndUpdate(_id, update, options, function(err, survey){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(survey);
  })
};
    
/**
 * Remove a specific survey by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

  surveyDao.findByIdAndRemove(req.params.id, function (err, data) {
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply(data);
  });
};


/**
 * Counts number of surveys for given conditions or no condition
 * @param req
 * @param reply
 */
exports.count = function (req, reply) {
  var query = req.query;
  var conditions;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};

  surveyDao.count(conditions, function(err, result){
    // Check for embed fields
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(result);
    //return reply(surveys);
  });
};

/**
 * Finds distinct values of field for documents matching conditions.
 *
 * @param req
 * @param reply
 */
exports.distinct = function (req, reply) {
  var query = req.query;
    
  var conditions, field,embed_fields;
    if(!_.isEmpty(query['filter']))  
      conditions = JSON.parse(query['filter']);
    else
      conditions = {};  
   
    if(!_.isEmpty(query['field']))  
      field = query['field'];
    else
      field = '';

  surveyDao.distinct(field, conditions, function(err, surveys){
    // Check for embed fields    
    if (err) {
      return reply(Boom.wrap(err));
    }    
    else
      return reply(surveys);
    //return reply(surveys);
  });

};


exports.getSurveyCountByOrganization = function(req, reply){
  var callback = function(err, data){
    if (err) {
      return reply(Boom.wrap(err));
    }
    return reply({
      survey_count: data
    });
  }

  return surveyDao.count({
    organization_id: mongoose.Types.ObjectId(req.query.organization_id),
    created_on: {
      $gte: req.query.from_date,
      $lt: req.query.to_date
    }
  }, callback)

}
